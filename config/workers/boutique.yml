# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------
# WARNING: This file is autogenerated. Do not manually edit.
# ----------------------------------------------------------

# [START gke_release_kubernetes_manifests_microservices_demo]
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL25leHVzdGVzdC54eXoiOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiYWRtaW4xMjMiLCJlbWFpbCI6InByb2Rldm9wc3Byb2plY3RzQGdtYWlsLmNvbSIsImF1dGgiOiJZV1J0YVc0NllXUnRhVzR4TWpNPSJ9fX0=
kind: Secret
metadata:
  namespace: default
  name: regcred
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: emailservice
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/emailservice:v0.3.8
        image: nexustest.xyz/emailservice
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        # livenessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: emailservice
spec:
  type: ClusterIP
  selector:
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: checkoutservice
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      serviceAccountName: default
      imagePullSecrets:
      - name: regcred
      containers:
        - name: server
          # image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.3.8
          image: nexustest.xyz/checkoutservice
          ports:
          - containerPort: 5050
          # readinessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:5050"]
          # livenessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
          - name: PORT
            value: "5050"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: PAYMENT_SERVICE_ADDR
            value: "paymentservice:50051"
          - name: EMAIL_SERVICE_ADDR
            value: "emailservice:5000"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: DISABLE_STATS
            value: "1"
          - name: DISABLE_TRACING
            value: "1"
          - name: DISABLE_PROFILER
            value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: checkoutservice
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: recommendationservice
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.3.8
        image: nexustest.xyz/recommendationservice
        ports:
        - containerPort: 8080
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        # livenessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 200m
            memory: 450Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: recommendationservice
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      imagePullSecrets:
      - name: regcred
      containers:
        - name: server
          # image: gcr.io/google-samples/microservices-demo/frontend:v0.3.8
          image: nexustest.xyz/frontend
          ports:
          - containerPort: 8080
          # readinessProbe:
          #   initialDelaySeconds: 10
          #   httpGet:
          #     path: "/_healthz"
          #     port: 8080
          #     httpHeaders:
          #     - name: "Cookie"
          #       value: "shop_session-id=x-readiness-probe"
          # livenessProbe:
          #   initialDelaySeconds: 10
          #   httpGet:
          #     path: "/_healthz"
          #     port: 8080
          #     httpHeaders:
          #     - name: "Cookie"
          #       value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice:9555"
          # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
          # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp 
          # - name: ENV_PLATFORM 
          #   value: "aws"
          - name: DISABLE_TRACING
            value: "1"
          - name: DISABLE_PROFILER
            value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          # - name: CYMBAL_BRANDING
          #   value: "true"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: paymentservice
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/paymentservice:v0.3.8
        image: nexustest.xyz/paymentservice
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: paymentservice
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: productcatalogservice
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.3.8
        image: nexustest.xyz/productcatalogservice
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:3550"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:3550"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: productcatalogservice
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: cartservice
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/cartservice:v0.3.8
        image: nexustest.xyz/cartservice
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 300m
            memory: 128Mi
        # readinessProbe:
        #   initialDelaySeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        # livenessProbe:
        #   initialDelaySeconds: 15
        #   periodSeconds: 10
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   namespace: default
#   name: loadgenerator
# spec:
#   selector:
#     matchLabels:
#       app: loadgenerator
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: loadgenerator
#       annotations:
#         sidecar.istio.io/rewriteAppHTTPProbers: "true"
#     spec:
#       serviceAccountName: default
#       terminationGracePeriodSeconds: 5
#       restartPolicy: Always
#       imagePullSecrets:
#       - name: regcred
#       initContainers:
#       - command:
#         - /bin/sh
#         - -exc
#         - |
#           echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
#           STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
#           if test $STATUSCODE -ne 200; then
#               echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
#               exit 1
#           fi
#         name: frontend-check
#         image: busybox:latest
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#       containers:
#       - name: main
#         # image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.3.8
#         image: nexustest.xyz/loadgenerator
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#         - name: USERS
#           value: "10"
#         resources:
#           requests:
#             cpu: 300m
#             memory: 256Mi
#           limits:
#             cpu: 500m
#             memory: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/currencyservice:v0.3.8
        image: nexustest.xyz/currencyservice
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7000"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7000"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: currencyservice
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: shippingservice
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      serviceAccountName: default
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/shippingservice:v0.3.8
        image: nexustest.xyz/shippingservice
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: shippingservice
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: redis-cart
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        # readinessProbe:
        #   periodSeconds: 5
        #   tcpSocket:
        #     port: 6379
        # livenessProbe:
        #   periodSeconds: 5
        #   tcpSocket:
        #     port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: redis-cart
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: adservice
spec:
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      imagePullSecrets:
      - name: regcred
      containers:
      - name: server
        # image: gcr.io/google-samples/microservices-demo/adservice:v0.3.8
        image: nexustest.xyz/adservice
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        # - name: JAEGER_SERVICE_ADDR
        #   value: "jaeger-collector:14268"
        resources:
          requests:
            cpu: 200m
            memory: 180Mi
          limits:
            cpu: 300m
            memory: 300Mi
        # readinessProbe:
        #   initialDelaySeconds: 20
        #   periodSeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:9555"]
        # livenessProbe:
        #   initialDelaySeconds: 20
        #   periodSeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:9555"]
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: adservice
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
# [END gke_release_kubernetes_manifests_microservices_demo]
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: frontend
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: default
  name: frontend-external
  labels:
    app: frontend
  annotations:
    # Load Balancer Name
    alb.ingress.kubernetes.io/load-balancer-name: frontend-external
    #kubernetes.io/ingress.class: "alb" (OLD INGRESS CLASS NOTATION - STILL WORKS BUT RECOMMENDED TO USE IngressClass Resource) # Additional Notes: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/ingress_class/#deprecated-kubernetesioingressclass-annotation
    # Ingress Core Settings
    alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/ip-address-type: dualstack
    # Health Check Settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /    
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'

    # Redirect Settings
    # alb.ingress.kubernetes.io/actions.redirect-to-eks: '{"type":"redirect","redirectConfig":{"host":"www.hiphub.org,"path":"/","port":"443","protocol":"HTTPS","query":"k=v","statusCode":"HTTP_302"}}'
    

    ## SSL Settings
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-central-1:199029369835:certificate/9c8a9b64-68cb-46df-8696-58bf3c0d954a
    #alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-1-2017-01 #Optional (Picks default if not used)   
    external-dns.alpha.kubernetes.io/hostname: www.hiphub.org, hiphub.org

    # SSL Redirect Setting
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: eks-ingress-class   # Ingress Class
  defaultBackend:
    service:
      name: frontend
      port:
        number: 80               
  rules:
    - host: "www.hiphub.org"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port: 
                  number: 80
    - host: "hiphub.org"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port: 
                  number: 80

